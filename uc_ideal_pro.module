<?php
/**
 * @file
 * Provides an iDEAL payment method for Ubercart.
 * Supports ING iDEAL Advanced, Rabobank iDEAL Professional and ABN iDEAL Zelfbouw.
 *
 * @author Mark Janssen (praseodym)
 *
 * Thanks to Martijn Wieringa for his iDEAL library (ideal.inc).
 */
 
define('IDEAL_TRX_STATUS_INVALID',   0x00);
define('IDEAL_TRX_STATUS_SUCCESS',   0x01);
define('IDEAL_TRX_STATUS_CANCELLED', 0x02);
define('IDEAL_TRX_STATUS_EXPIRED',   0x03);
define('IDEAL_TRX_STATUS_FAILURE',   0x04);
define('IDEAL_TRX_STATUS_OPEN',      0x05);

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_ideal_pro_menu() {
  $items['uc_ideal_pro/complete/%uc_order'] = array(
    'title' => 'iDEAL Payment Creation',
    'page callback' => 'uc_ideal_pro_complete',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_ideal_pro_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_payment_methods_form') {
    $form['#submit'][] = 'uc_ideal_pro_payment_method_settings_submit';
  }
  // No guarantee that uc_ideal_pro_bank wasn't set in an earlier order.
  // else if ($form_id == 'uc_cart_checkout_review_form' && isset($_SESSION['uc_ideal_pro_bank'])) {
  //   $form['submit']['#value'] = t('Submit order and pay trough iDEAL');
  // }
}

/**
 * Implementation of hook_cron().
 */
function uc_ideal_pro_cron() {
  echo 'cron';
  $result = db_query("SELECT order_id, trx_id, status FROM {uc_payment_ideal} WHERE status = 'OPEN' AND received < %d", strtotime('-30 minutes'));
  
  while ($trx = db_fetch_array($result)) {
    $order = uc_order_load($trx['order_id']);
    $status = _uc_ideal_pro_refresh_status($order, $trx['trx_id']);
    
    switch ($status) {
      case IDEAL_TRX_STATUS_OPEN:
        // iDEAL status should never be OPEN after 1 day
        if ($order['created'] < strtotime('-24 hours')) {
          watchdog('uc_ideal_pro', 'iDEAL payment creation error: @error', array('@error' => _uc_ideal_pro_get_errors($trx_req)), WATCHDOG_ERROR, url('admin/store/orders/' . $order->order_id));
        }
        break;
        
      case IDEAL_TRX_STATUS_SUCCESS:
        if ($order->order_status == 'ideal_pending') {
          // Add a comment to let sales team know this came in through the site.
          uc_order_comment_save($order->order_id, 0, t('Order created through website.'), 'admin');
          
          uc_cart_complete_sale($order);
        }
    }
  }
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_payment_method().
 */
function uc_ideal_pro_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_ideal_pro');
  $title = '<img src="'. $path .'/ideal.gif" style="position: relative; top: 5px;"> '
         . t('iDEAL - Pay online through your own bank');
         
  $methods[] = array(
    'id' => 'ideal_pro',
    'name' => t('iDEAL Professional'),
    'title' => $title,
    'review' => t('iDEAL'),
    'desc' => t('Let users pay through iDEAL (ING Advanced, Rabo Professional or ABN Zelfbouw).'),
    'callback' => 'uc_payment_method_ideal_pro',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implementation of hook_order().
 */
function uc_ideal_pro_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      if ($arg1->payment_method == 'ideal_pro') {
        uc_ideal_pro_pay($arg1);
      }
      break;

    case 'delete':
      // db_query("DELETE FROM {uc_payment_ideal} WHERE order_id = %d", $arg1);
      break;
  }
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_payment_method_ideal_pro($op, &$arg1) {
  switch ($op) {
    case 'cart-details':
      $details = drupal_get_form('uc_payment_method_ideal_pro_form', $arg1);
      return uc_strip_form($details);
      
    case 'cart-process':
      if (isset($_POST['uc_ideal_pro_bank'])) {
        $bank = check_plain($_POST['uc_ideal_pro_bank']);
        if (!in_array($bank, array_keys(_uc_ideal_pro_get_issuers()))) {
          drupal_set_message('iDEAL: Invalid bank selected.', 'error');
          return false;
        }
        $_SESSION['uc_ideal_pro_bank'] = $bank;
        return true;
      }
      else {
        drupal_set_message('iDEAL: No bank selected.', 'error');
        return false;
      }
      
    case 'order-view':
      $trx_id = db_result(db_query("SELECT trx_id FROM {uc_payment_ideal} WHERE order_id = %d", $arg1->order_id));
      if (empty($txn_id)) {
        $txn_id = t('Unknown');
      }
      return t('Transaction ID:<br />@trx_id', array('@trx_id' => $trx_id));

    case 'settings':
      return uc_payment_method_ideal_pro_settings_form();
  }
}

function uc_payment_method_ideal_pro_settings_form() {
  $form['uc_ideal_pro_acquirer'] = array(
    '#type' => 'select',
    '#title' => t('Acquirer bank'),
    '#options' => array(
      'simulator' => 'ideal-simulator.nl',
      'abnamro' => 'ABN Amro',
      'rabobank' => 'Rabobank',
      'ing' => 'ING Bank'
    ),
    '#default_value' => variable_get('uc_ideal_pro_acquirer', 'simulator'),
  );
  $form['uc_ideal_pro_debug_ipn'] = array(
    '#type' => 'checkbox',
    '#title' => t('Test mode'),
    '#default_value' => variable_get('uc_ideal_pro_test', TRUE),
  );
  $form['uc_ideal_pro_execute_tests'] = array(
    '#type' => 'submit',
    '#value' => t('Execute tests'),
    '#submit' => array('uc_ideal_pro_execute_tests'),
    '#suffix' => '<div class="description">' . t('Executes tests required to complete iDEAL acceptance.') . '</div>',
  );
  $form['uc_ideal_pro_mechant'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('uc_ideal_pro_mechant', '123456789'),
  );
  $form['uc_ideal_pro_sub'] = array(
    '#type' => 'textfield',
    '#title' => t('Sub ID'),
    '#default_value' => variable_get('uc_ideal_pro_sub', '0'),
  );
  $form['uc_ideal_pro_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Certificates path'),
    '#default_value' => variable_get('uc_ideal_pro_path', dirname(__FILE__) . '/ssl'),
    '#description' => t('This directory should NOT be publicly accessible. It is therefore recommended to place it outside your wwwroot.'),
  );
  $form['uc_ideal_pro_cert'] = array(
    '#type' => 'textfield',
    '#title' => t('Certificate filename'),
    '#default_value' => variable_get('uc_ideal_pro_cert', 'simulator-cert.cer'),
  );
  $form['uc_ideal_pro_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key filename'),
    '#default_value' => variable_get('uc_ideal_pro_key', 'simulator-priv.pem'),
  );
  $form['uc_ideal_pro_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key password'),
    '#default_value' => variable_get('uc_ideal_pro_password', 'Password'),
  );

  return $form;
}

function uc_ideal_pro_payment_method_settings_submit($form, &$form_state) {
  // Clear cache, in case acquirer has changed.
  _uc_ideal_pro_reset_issuers();
}


function uc_payment_method_ideal_pro_form($form_state, $order) {
  $issuers = _uc_ideal_pro_get_issuers();
  
  if (count($issuers) > 0) {
    $form['uc_ideal_pro_bank'] = array(
      '#type' => 'select',
      '#title' => t('Bank'),
      '#description' => t('Select your bank for iDEAL payment.'),
      '#options' => $issuers,
    );
  }
  else {
    $form['uc_ideal_pro_bank'] = array(
      '#value' => '<strong>' . t('iDEAL payment not available. Please choose an other payment method.') . '</strong>',
    );
  }

  return $form;
}

function uc_ideal_pro_pay($order) {
  _uc_ideal_pro_load_library();
  
  $desc = t('Order number @id (@count products).',
    array('@id' => $order->order_id, '@count' => $order->product_count));
  $ec = sha1($order->created . $order->order_total . $order->primary_email);
  $trx_req = new TransactionRequest();
  
  $trx_req->setOrderId($order->order_id);
  $trx_req->setOrderDescription($desc);
  $trx_req->setOrderAmount($order->order_total);

  $trx_req->setIssuerId($_SESSION['uc_ideal_pro_bank']);
  $trx_req->setEntranceCode($ec);
  
  $return = url('uc_ideal_pro/complete/' . $order->order_id, Array('absolute' => TRUE));
  $trx_req->setReturnUrl($return);
  
  $trx_id = $trx_req->doRequest();
  
  if($trx_req->hasErrors()) {
    watchdog('uc_ideal_pro', 'iDEAL payment creation error: @error', array('@error' => _uc_ideal_pro_get_errors($trx_req)), WATCHDOG_ERROR);
    drupal_set_message(t('An error occurred handling your iDEAL payment. Please contact us for support.'));
    drupal_goto('cart');
  }
  else {
    db_query("INSERT INTO {uc_payment_ideal} (order_id, trx_id, status, received) VALUES (%d, '%s', 'OPEN', %d)", $order->order_id, $trx_id, time());
    uc_order_update_status($order->order_id, 'ideal_pending');
    
    $_SESSION['uc_ideal_pro_ec'] = $ec;
    $trx_req->doTransaction();
  }
}

function uc_ideal_pro_complete($order) {
  if (!isset($_SESSION['cart_order'])) {
    // Can happen if user pressed the back button on the order complete page.
    watchdog('uc_ideal_pro', 'User visited iDEAL complete page without a cart.', array(), WATCHDOG_WARNING);
    drupal_goto('cart');
  }
  
  $trx = db_fetch_array(db_query("SELECT trx_id, status FROM {uc_payment_ideal} WHERE order_id = %d", $order->order_id));
  
  // Ensure that nobody is trying to mess around with orders.
  if (intval($_SESSION['cart_order']) != $order->order_id || 
      $_SESSION['uc_ideal_pro_ec'] != $_GET['ec'] ||
      $trx['trx_id'] != $_GET['trxid']) {
    drupal_set_message(t('Thank you for your order! Unfortunately, your iDEAL payment could not be verified automatically. Please contact us for support.'), 'warning');
    drupal_goto('cart');
  }
  
  // Ensure the payment method is iDEAL Advanced.
  if ($order->payment_method != 'ideal_pro') {
    drupal_goto('cart');
  }
  
  // Ensure the transaction wasn't already completed by a cron run.
  if ($trx['status'] != 'OPEN') {
    uc_cart_empty(uc_cart_get_id());
    // Clear our the session variables used to force the cart workflow.
    unset($_SESSION['cart_order'], $_SESSION['do_complete'], $_SESSION['new_user']);
    drupal_goto('cart');
  }
  
  $status = _uc_ideal_pro_refresh_status($order, $trx['trx_id']);
  
  switch ($status) {
    case IDEAL_TRX_STATUS_OPEN:
    case IDEAL_TRX_STATUS_SUCCESS:
      // If payment is still OPEN, we'll check it on the next cron run.
      $_SESSION['do_complete'] = TRUE;
      drupal_goto('cart/checkout/complete');
    case IDEAL_TRX_STATUS_INVALID:
      drupal_set_message(t('An error occurred handling your iDEAL payment. Please contact us for support.'));
      drupal_goto('cart');
    default:
      unset($_SESSION['cart_order']);
      drupal_set_message(t('Your iDEAL payment was cancelled or has failed. Your order was not completed. Please contact us for support.'), 'warning');
      drupal_goto('cart');
  }
}

function uc_ideal_pro_execute_tests() {
  _uc_ideal_pro_reset_issuers();
  _uc_ideal_pro_load_library();
  
  $issuers = _uc_ideal_pro_get_issuers();
  
  if (count($issuers) == 0) {
    drupal_set_message(t('Tests failed: issuers list (directory request) could not be fetched. See watchdog for more information.'), 'error');
    return;
  }
  
  $issuers = array_keys($issuers);
  $issuer = $issuers[0];
  
  $tests_status = Array(
    1.00 => IDEAL_TRX_STATUS_SUCCESS,
    2.00 => IDEAL_TRX_STATUS_CANCELLED,
    3.00 => IDEAL_TRX_STATUS_EXPIRED,
    4.00 => IDEAL_TRX_STATUS_OPEN,
    5.00 => IDEAL_TRX_STATUS_FAILURE,
    7.00 => IDEAL_TRX_STATUS_INVALID,
  );
  
  $tests_error = Array(
    7.00 => Array('code' => 'SO1000', 'desc' => 'Failure in system - System generating error: Issuer'),
  );
  
  foreach ($tests_status as $amount => $expected_status) {
    $trx_req = new TransactionRequest();
    $trx_req->setOrderId('Test ' . $amount);
    $trx_req->setOrderDescription('iDEAL Professional Testcase');
    $trx_req->setOrderAmount($amount);
    $trx_req->setIssuerId($issuer);
    $trx_req->setReturnUrl('http://example.com');
    $trx_id = $trx_req->doRequest();
    
    if ($trx_req->hasErrors()) {
      watchdog('uc_ideal_pro', 'iDEAL testcase @amount failed with error: @error',
        array('@amount' => $amount, '@error' => _uc_ideal_pro_get_errors($trx_req)), WATCHDOG_ERROR);
      drupal_set_message(t('Test @amount failed: transaction request error. See watchdog for more information.', array('@amount' => $amount)), 'error');
      return;
    }
    // Note: we do not actually need to redirect the user to the
    //       bank's site for the testcases to return the expected status.
    
    $status_req = new StatusRequest();
    $status_req->setTransactionId($trx_id);
    
    $status_code = $status_req->doRequest();
    $status = _uc_ideal_pro_trx_status($status_code);
    
    if ($status != $expected_status) {
      watchdog('uc_ideal_pro', 'iDEAL testcase @amount failed with error: @error',
        array('@amount' => $amount, '@error' => _uc_ideal_pro_get_errors($status_req)), WATCHDOG_ERROR);
      drupal_set_message(t('Test @amount failed: status request did not return expected status. See watchdog for more information.', array('@amount' => $amount)), 'error');
      return;
    }
    
    if ($status == IDEAL_TRX_STATUS_INVALID) {
      $error = $status_req->getErrors();
      if ($tests_error[$amount]['code'] != $error[0]['code'] || 
          $tests_error[$amount]['desc'] != $error[0]['desc']) {
        watchdog('uc_ideal_pro', 'iDEAL testcase @amount failed with error: @error',
          array('@amount' => $amount, '@error' => _uc_ideal_pro_get_errors($status_req)), WATCHDOG_ERROR);
        drupal_set_message(t('Test @amount failed: status request did not return expected error. See watchdog for more information.', array('@amount' => $amount)), 'error');
        return;
      }
    }
  }
  
  drupal_set_message(t('All tests completed successfully.'));
}

function _uc_ideal_pro_load_library() {
  static $loaded = FALSE;
  
  if (!$loaded) {
    define('IDEAL_ACQUIRER', variable_get('uc_ideal_pro_acquirer', 'simulator'));
    define('IDEAL_TEST_MODE', variable_get('uc_ideal_pro_test', TRUE));
    define('IDEAL_MERCHANT_ID', variable_get('uc_ideal_pro_mechant', '123456789'));
    define('IDEAL_SUB_ID', variable_get('uc_ideal_pro_sub', '0'));
    define('IDEAL_SECURE_PATH', variable_get('uc_ideal_pro_path', dirname(__FILE__) . '/ssl') . '/');
    define('IDEAL_PRIVATE_CERTIFICATE_FILE', variable_get('uc_ideal_pro_cert', 'simulator-cert.cer')); 
    define('IDEAL_PRIVATE_KEY', variable_get('uc_ideal_pro_password', 'Password'));
    define('IDEAL_PRIVATE_KEY_FILE', variable_get('uc_ideal_pro_key', 'simulator-priv.pem'));

    require_once('ideal.inc');
    
    $loaded = TRUE;
  }
}

/**
 * The iDEAL library we use can also manage caching, but does so in a file.
 * Using the Drupal database instead is cleaner and avoids file permission errors.
 */
function _uc_ideal_pro_get_issuers() {
  $issuers = variable_get('uc_ideal_pro_issuers', NULL);
  $issuers_fetched = variable_get('uc_ideal_pro_issuers_fetched', NULL);
  
  if (!isset($issuers) || $issuers_fetched < strtotime('-24 hours')) {
    _uc_ideal_pro_load_library();
    $issuer_req = new IssuerRequest();
    $issuers = $issuer_req->doRequest();

    if($issuer_req->hasErrors()) {
      watchdog('uc_ideal_pro', 'Error fetching issues list: @error', array('@error' => _uc_ideal_pro_get_errors(getErrors)), WATCHDOG_ERROR);
    }
    else {
      variable_set('uc_ideal_pro_issuers', $issuers);
      variable_set('uc_ideal_pro_issuers_fetched', time());
    }
  }
  
  return $issuers;
}

function _uc_ideal_pro_reset_issuers() {
  variable_del('uc_ideal_pro_issuers');
  variable_del('uc_ideal_pro_issuers_fetched');
}

/**
 * Fetch iDEAL status from acquirer and update order if needed.
 * This function should never be called if the order already has status SUCCESS.
 */
function _uc_ideal_pro_refresh_status($order, $trx_id) {
  _uc_ideal_pro_load_library();
  
  $status_req = new StatusRequest();
  $status_req->setTransactionId($trx_id);
  
  $status_code = $status_req->doRequest();
  $status = _uc_ideal_pro_trx_status($status_code);
  
  if ($status_req->hasErrors()) {
    watchdog('uc_ideal_pro', 'iDEAL payment status request error: @error',
      array('@error' => _uc_ideal_pro_get_errors($status_req)), WATCHDOG_ERROR);
  }
  else {
    db_query("UPDATE {uc_payment_ideal} SET status = '%s', received = %d WHERE order_id = %d", $status_code, time(), $order->order_id);
    
    if ($status == IDEAL_TRX_STATUS_SUCCESS) {
      $acct = check_plain($status_req->getAccountNumber());
      $name = check_plain($status_req->getAccountName());
      $city = check_plain($status_req->getAccountCity());
      
      $context = array(
        'revision' => 'formatted-original',
        'type' => 'amount',
      );
      
      $comment = t('Transaction with ID @trx_id from @acct (@name, @city)',
        array('@trx_id' => $trx_id, '@acct' => $acct, '@name' => $name, '@city' => $city));
      uc_payment_enter($order->order_id, 'ideal_pro', $order->order_total, $order->uid, NULL, $comment);
      
      uc_order_comment_save($order->order_id, 0, t('Payment of @amount submitted through iDEAL.',
        array('@amount' => uc_price($order->order_total, $context))), 'order', 'payment_received');
      uc_order_comment_save($order->order_id, 0, t('iDEAL reported payment of @amount from @acct (@name, @city).',
        array('@amount' => uc_price($order->order_total, $context), '@acct' => $acct, '@name' => $name, '@city' => $city)));
    }
    else if ($status != IDEAL_TRX_STATUS_OPEN) {
      // Since status should not change if not OPEN, we can cancel this order.
      uc_order_update_status($order->order_id, uc_order_state_default('canceled'));
      uc_order_comment_save($order->order_id, 0, t('iDEAL payment failed with status @status_code',
        array('@status_code' => $status_code)), 'order', 'canceled');
      watchdog('uc_ideal_pro', 'iDEAL payment failed: status: @status_code',
        array('@status_code' => $status_code), WATCHDOG_WARNING);
    }
  }
  
  return $status;
}

function _uc_ideal_pro_trx_status($status) {
  switch (strtoupper($status)) {
    case 'OPEN':
      return IDEAL_TRX_STATUS_OPEN;
    case 'SUCCESS':
      return IDEAL_TRX_STATUS_SUCCESS;
    case 'CANCELLED':
      return IDEAL_TRX_STATUS_CANCELLED;
    case 'EXPIRED':
      return IDEAL_TRX_STATUS_EXPIRED;
    case 'FAILURE':
      return IDEAL_TRX_STATUS_FAILURE;
    default:
      return IDEAL_TRX_STATUS_INVALID;
  }
}

function _uc_ideal_pro_get_errors($obj) {
  $errors = $obj->getErrors();
  $readable = '';
  foreach ($errors as $key => $error) {
    if ($error['code']) {
      $readable .= $error['code'] . ': ';
    }
    $readable .= "'${error['desc']}' in ${error['file']}:${error['line']}\n";
  }
  return $readable;
}
