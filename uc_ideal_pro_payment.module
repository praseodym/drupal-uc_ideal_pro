<?php
// $Id$

/**
 * @file
 * iDEAL payment module for Ubercart. No extra gateway needed.
 * For iDEAL ING/PB Advanced, RABO Professional & Fortis iDEAL
 *
 * Development by Qrios | http://www.qrios.nl | c.kodde {at} qrios {dot} nl
 *
 *
 */


//First load include based on available lib
$lib = uc_ideal_pro_get_lib();
$path_module = drupal_get_path('module', 'uc_ideal_pro_payment');
if ($lib == 'thinmpi') {
  require_once($path_module .'/uc_ideal_pro_thinmpi.inc.php');
}
elseif ($lib == 'connector') {
  require_once($path_module .'/uc_ideal_pro_connector.inc.php');
}

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_ideal_pro_payment_menu() {
  $items = array();

    $items['cart/checkout/ideal_pro_dirreq'] = array(
      'title' => t('iDEAL Payment Page'),
      'page callback' => 'uc_ideal_pro_dirreq_form',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    $items['cart/checkout/ideal_pro_transreq'] = array(
      'title' => t('iDEAL Payment transfer request'),
      'page callback' => 'uc_ideal_pro_transreq_call',
      'page arguments' => array(arg(1), arg(2), arg(3), arg(4)),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    $items['cart/checkout/ideal_pro_statreq'] = array(
      'title' => t('iDEAL Payment status request'),
      'page callback' => 'uc_ideal_pro_statreq_call',
      'page arguments' => array(arg(1), arg(2), arg(3), arg(4)),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

    return $items;
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_payment_method().
 */

function uc_ideal_pro_payment_payment_method() {
  $methods[] = array(
    'id' => 'ideal_pro_payment',
    'name' => t('iDEAL Pro Payment'),
    'title' => '<img src="/'. drupal_get_path('module', 'uc_ideal_pro_payment') .'/ico_ideal.png" style="position: relative; top: 5px; margin-right: 4px;">'. t('iDEAL Payment'),
    'desc' => t('iDEAL ING/PB Advanced and Rabo Professional payment method type.'),
    'callback' => 'uc_payment_method_ideal_pro',
    'weight' => 2,
    'checkout' => TRUE,
    'backend' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implementation of hook_order().
 */
function uc_ideal_pro_payment_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      //Called at order submission [Submit order]

      //Check if this is the chosen method
      if ($arg1->payment_method == 'ideal_pro_payment') {
        return theme(uc_ideal_pro_call($arg1, $arg2));
      }
    case 'load':
      //Called at opening 'Review order' right after submit 'review order'
      break;

    case 'save':
      //Called at submit [review order]
      if ($arg1->payment_method == 'ideal_pro_payment') {
        //Nothing??
      }
      break;

    case 'delete':
      //db_query("DELETE FROM {uc_payment_credit} WHERE order_id = %d", $arg1);
      break;
  }
}

/*******************************************************************************
 * Callback Functions
 ******************************************************************************/

/**
 * Callback from hook payment_method
 */

 function uc_payment_method_ideal_pro($op, $arg1) {
  switch ($op) {
    case 'order-view':
    case 'customer-view':
      $result = db_query("SELECT description FROM {uc_ideal_pro_payment} WHERE "
                        ."order_id = %d", $arg1->order_id);
      if ($row = db_fetch_object($result)) {
        $output = t('Type:') .' '. $row->description;
      }
      else {
        $output = t('Type:') .' '. t('Unknown');
      }
      return $output;

    case 'order-details':
      $details = drupal_get_form('uc_ideal_pro_payment_method_form', $arg1);
      return uc_strip_form($details);

    case 'edit-process':
      $changes['payment_details']['pm_ideal_pro_description'] = check_plain($_POST['pm_ideal_pro_description']);
      return $changes;

    case 'settings':
        return (uc_ideal_pro_payment_settings_form());
        break;
    case 'order-load':
      $result = db_query("SELECT description FROM {uc_ideal_pro_payment} WHERE "
                        ."order_id = %d", $arg1->order_id);
      if ($row = db_fetch_object($result)) {
        $arg1->payment_details['description'] = $row->description;
      }
      break;

    case 'order-save':
      db_query("DELETE FROM {uc_ideal_pro_payment} WHERE order_id = %d", $arg1->order_id);
      if (strlen($arg1->payment_details['pm_ideal_pro_description']) > 0) {
        db_query("INSERT INTO {uc_ideal_pro_payment} (order_id, description) VALUES "
                ."(%d, '%s')", $arg1->order_id,
                $arg1->payment_details['pm_ideal_pro_description']);
      }
      break;
  }
}

function uc_ideal_pro_payment_method_form($order) {
  $form['pm_ideal_pro_description'] = array(
    '#type' => 'textfield',
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => $order->payment_details['description'],
  );

  return $form;
}


function theme_uc_ideal_pro_payment_method_form($form) {
  $output = '<table class="order-edit-table"><tr><td class="ideal-pro-label">'
          . t('Description:') .'</td><td>'
          . drupal_render($form['pm_ideal_pro_description'])
          .'</td></tr></table>';
  return $output;
}

/*******************************************************************************
 * Callback Functions
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function uc_ideal_pro_payment_settings_form() {
  $form['ideal_pro_privatekey'] = array(
    '#type' => 'textfield',
    '#title' => t('privatekey'),
    '#default_value' => variable_get('ideal_pro_privatekey', 'priv.pem'),
    '#description' => t('The private key .pem file located in */security.'),
  );
  $form['ideal_pro_privatekeypass'] = array(
    '#type' => 'textfield',
    '#title' => t('privatekeypass'),
    '#default_value' => variable_get('ideal_pro_privatekeypass', ''),
    '#description' => t('The private key password used for generating the key file.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_privatecert'] = array(
    '#type' => 'textfield',
    '#title' => t('privatecert'),
    '#default_value' => variable_get('ideal_pro_privatecert', 'cert.cer'),
    '#description' => t('The private certificate .cer file located in */security.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_authenticationtype'] = array(
    '#type' => 'textfield',
    '#title' => t('authenticationtype'),
    '#default_value' => variable_get('ideal_pro_authenticationtype', 'SHA1_RSA'),
    '#description' => t('Authentication type protocol. Leave SHA1_RSA default if unsure.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_certificate0'] = array(
    '#type' => 'textfield',
    '#title' => t('certificate0'),
    '#default_value' => variable_get('ideal_pro_certificate0', 'ideal.cer'),
    '#description' => t('Certificate0 contains the signing certificate of your acquirer. This would probably be ideal.cer or webserver.cer.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_acquirerurl'] = array(
    '#type' => 'textfield',
    '#title' => t('acquirerurl'),
    '#default_value' => variable_get('ideal_pro_acquirerurl', 'ssl://idealtest.secure-ing.com:443/ideal/iDeal'),
    '#description' => t('Address of the iDEAL acquiring server. Use ssl://idealtest.secure-ing.com:443/ideal/iDeal during integration/test. Use ssl://ideal.secure-ing.com:443/ideal/iDEAL only for production. Look into integration documents for Rabo or Fortis equivalents.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_acquirertimeout'] = array(
    '#type' => 'textfield',
    '#title' => t('acquirertimeout'),
    '#default_value' => variable_get('ideal_pro_acquirertimeout', '10'),
    '#description' => t('Do not change AcquirerTimeout unless you have specific reasons to do so.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_merchantid'] = array(
    '#type' => 'textfield',
    '#title' => t('merchantid'),
    '#default_value' => variable_get('ideal_pro_merchantid', '000000000'),
    '#description' => t('Default MerchantID enables you to test the example demoshop. Your own Merchant ID can be retrieved via the iDEAL Dashboard.'),
    '#required' => TRUE,
  );
  $form['ideal_pro_subid'] = array(
    '#type' => 'textfield',
    '#title' => t('subid'),
    '#default_value' => variable_get('ideal_pro_subid', '0'),
    '#description' => t('Do not change subID unless you have specific reasons to do so.'),
  );
  $form['ideal_pro_currency'] = array(
    '#type' => 'textfield',
    '#title' => t('currency'),
    '#default_value' => variable_get('ideal_pro_currency', 'EUR'),
    '#description' => t('Do not change currency unless you have specific reasons to do so'),
    '#required' => TRUE,
  );
  $form['ideal_pro_expirationperiod'] = array(
    '#type' => 'textfield',
    '#title' => t('expirationperiod'),
    '#default_value' => variable_get('ideal_pro_expirationperiod', 'PT10M'),
    '#description' => t('ExpirationPeriod is the timeframe during which the transaction is allowed to take place. Maximum is PT1H (1 hour).'),
    '#required' => TRUE,
  );
  $form['ideal_pro_language'] = array(
    '#type' => 'textfield',
    '#title' => t('language'),
    '#default_value' => variable_get('ideal_pro_language', 'nl'),
    '#description' => t('Language is only used for showing error messages in the prefered language. nl/en.'),
    '#required' => TRUE,
  );

  $form['ideal_pro_description_field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Description'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['ideal_pro_description_field']['ideal_pro_description_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('default description'),
    '#default_value' => variable_get('ideal_pro_description_check', FALSE),
    '#description' => t('Enable if you want to use a default description.'),
  );
  $form['ideal_pro_description_field']['ideal_pro_description'] = array(
    '#type' => 'textfield',
    '#title' => t('description'),
    '#default_value' => variable_get('ideal_pro_description', 'default description'),
    '#description' => t('Used when you do not want to use transaction specific descriptions.'),
  );

  $form['ideal_pro_entrancecode_field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default EntranceCode'),
  );
  $form['ideal_pro_entrancecode_field']['ideal_pro_entrancecode_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('default entrancecode'),
    '#default_value' => variable_get('ideal_pro_entrancecode_check', FALSE),
    '#description' => t('Enable if you want to use a entrance code.'),
  );
  $form['ideal_pro_entrancecode_field']['ideal_pro_entrancecode'] = array(
    '#type' => 'textfield',
    '#title' => t('entrancecode'),
    '#default_value' => variable_get('ideal_pro_entrancecode', '15674022'),
    '#description' => t('Used when you do not want to use transaction specific entrance codes.'),
  );

  return $form;
}

/*Redirect/return helper functions*/
function uc_ideal_pro_dirreq_form() {
  if ($_SESSION['ideal_pro_dirreq_form'] !== FALSE) {
    drupal_add_css(drupal_get_path('module', 'uc_ideal_pro_payment') .'/uc_ideal_pro_payment_form.css');
    $ideal_pro_form = $_SESSION['ideal_pro_dirreq_form'];
    $_SESSION['ideal_pro_dirreq_form'] = FALSE;
    return ($ideal_pro_form .' ' );
  }
  else {
    drupal_goto('cart/');
  }
}

/*Get configuration*/
function LoadConfiguration() {
  $url_base = url(NULL, array('absolute' => TRUE));
  //Check url_base ends with /, else add (i18n)
  if(substr($url_base, strlen($url_base)-1) != '/'){
    $url_base = $url_base.'/';
  }
  //Load configuration in array
  $arr_conf = array(
    'PRIVATEKEY' =>         filter_xss(variable_get('ideal_pro_privatekey', 'priv.pem')),
    'PRIVATEKEYPASS' =>     filter_xss(variable_get('ideal_pro_privatekeypass', FALSE)),
    'PRIVATECERT' =>        filter_xss(variable_get('ideal_pro_privatecert', 'cert.cer')),
    'AUTHENTICATIONTYPE' => filter_xss(variable_get('ideal_pro_authenticationtype', 'SHA1_RSA')),
    'CERTIFICATE0' =>       filter_xss(variable_get('ideal_pro_certificate0', 'ideal.cer')),
    'ACQUIRERURL' =>        filter_xss(variable_get('ideal_pro_acquirerurl', 'ssl://idealtest.secure-ing.com:443/ideal/iDeal')),
    'ACQUIRERTIMEOUT' =>    filter_xss(variable_get('ideal_pro_acquirertimeout', 10)),
    'MERCHANTID' =>         check_plain(variable_get('ideal_pro_merchantid', '000000000')),
    'SUBID' =>              filter_xss(variable_get('ideal_pro_subid', 0)),
    'MERCHANTRETURNURL' =>  $url_base .'cart/checkout/ideal_pro_statreq',
    'CURRENCY' =>           filter_xss(variable_get('ideal_pro_currency', 'EUR')),
    'EXPIRATIONPERIOD' =>   filter_xss(variable_get('ideal_pro_expirationperiod', 'PT10M')),
    'LANGUAGE' =>           filter_xss(variable_get('ideal_pro_language', 'nl')),
    //debug
    //'LOGFILE' =>           filter_xss(variable_get('ideal_pro_logfile', 'ideal_log.log')),
  );

  //IMPORTANT, 'DESCRIPTION' is bound to max. 32 chars!!
  if (variable_get('ideal_pro_description_check', FALSE) == TRUE) {
    $arr_conf['DESCRIPTION'] = variable_get('uc_store_name', 'Webshop') .' '. t('order#') . $_SESSION['ideal_pro_order_id'];
  }
  else {
    $arr_conf['DESCRIPTION'] = variable_get('uc_store_name', 'Webshop') .' '. t('order#') . $_SESSION['ideal_pro_order_id'];
  }
  if (variable_get('ideal_pro_entrancecode_check', FALSE) == TRUE) {
    $arr_conf['ENTRANCECODE'] = variable_get('ideal_pro_entrancecode', 15674022);
  }
  else {
    $arr_conf['ENTRANCECODE'] = $_SESSION['ideal_pro_order_id'];
  }

  return $arr_conf;
}

/*Lookup installed PHP iDEAL lib*/
function uc_ideal_pro_get_lib() {
  $path_module = drupal_get_path('module', 'uc_ideal_pro_payment');
  if (file_exists($path_module .'/lib/ThinMPI.php')) {
    $lib = 'thinmpi'; //Rabo + old ING
  }
  elseif (file_exists($path_module .'/lib/iDEALConnector.php')) {
    $lib = 'connector'; //New ING
  }
  else {
    //No lib available
    watchdog('uc_ideal_pro_payment', t('iDEAL PHP library not found in /lib.'), NULL, WATCHDOG_ERROR);
    drupal_set_message(t('iDEAL PHP library not found in /lib.'), 'error');
    return;
  }
  return $lib;
}
